/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  KittyPartyFactory,
  KittyPartyFactoryInterface,
} from "../KittyPartyFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tomCatContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_accountantContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "kreator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "kitty",
        type: "address",
      },
    ],
    name: "KittyLive",
    type: "event",
  },
  {
    inputs: [],
    name: "accountantContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amountInDAIPerRound",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_dai_address",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "_durationInDays",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "_kittyType",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "_vrfEnabled",
        type: "bool",
      },
      {
        internalType: "address",
        name: "yieldContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "daoTreasuryContract",
        type: "address",
      },
    ],
    name: "createKitty",
    outputs: [
      {
        internalType: "address",
        name: "kittyAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "candidateAddress",
        type: "address",
      },
    ],
    name: "getMyKitties",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "myKitties",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tomCatContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610dc0380380610dc0833981810160405281019061003291906100cf565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610154565b6000815190506100c98161013d565b92915050565b600080604083850312156100e257600080fd5b60006100f0858286016100ba565b9250506020610101858286016100ba565b9150509250929050565b60006101168261011d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6101468161010b565b811461015157600080fd5b50565b610c5d806101636000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630d19b3911461005c57806316b192cb1461007a578063890e9385146100985780639c6854c6146100c8578063b373783f146100f8575b600080fd5b610064610128565b6040516100719190610996565b60405180910390f35b61008261014c565b60405161008f9190610996565b60405180910390f35b6100b260048036038101906100ad919061076d565b610172565b6040516100bf9190610996565b60405180910390f35b6100e260048036038101906100dd9190610744565b6101c0565b6040516100ef91906109b1565b60405180910390f35b610112600480360381019061010d91906107a9565b61028d565b60405161011f9190610996565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002602052816000526040600020818154811061018e57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561028157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610237575b50505050509050919050565b6000806102b960008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661061b565b90508073ffffffffffffffffffffffffffffffffffffffff1663698698158a8a8a8a8a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b8b6040518963ffffffff1660e01b8152600401610324989796959493929190610a13565b600060405180830381600087803b15801561033e57600080fd5b505af1158015610352573d6000803e3d6000fd5b50505050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040161042f9190610996565b600060405180830381600087803b15801561044957600080fd5b505af115801561045d573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f9a6928481677ec8f4bfb3095b0b1c8102d2354f1108b4b7e127c95a649832520826040516104a79190610996565b60405180910390a26000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516024016104fb9190610996565b6040516020818303038152906040527f8f3bfe2f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610585919061097f565b6000604051808303816000865af19150503d80600081146105c2576040519150601f19603f3d011682016040523d82523d6000602084013e6105c7565b606091505b505090508061060b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610602906109d3565b60405180910390fd5b8192505050979650505050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e2906109f3565b60405180910390fd5b919050565b6000813590506106ff81610bcb565b92915050565b60008135905061071481610be2565b92915050565b60008135905061072981610bf9565b92915050565b60008135905061073e81610c10565b92915050565b60006020828403121561075657600080fd5b6000610764848285016106f0565b91505092915050565b6000806040838503121561078057600080fd5b600061078e858286016106f0565b925050602061079f8582860161071a565b9150509250929050565b600080600080600080600060e0888a0312156107c457600080fd5b60006107d28a828b0161071a565b97505060206107e38a828b016106f0565b96505060406107f48a828b0161072f565b95505060606108058a828b0161072f565b94505060806108168a828b01610705565b93505060a06108278a828b016106f0565b92505060c06108388a828b016106f0565b91505092959891949750929550565b6000610853838361085f565b60208301905092915050565b61086881610af1565b82525050565b61087781610af1565b82525050565b600061088882610aa1565b6108928185610ac4565b935061089d83610a91565b8060005b838110156108ce5781516108b58882610847565b97506108c083610ab7565b9250506001810190506108a1565b5085935050505092915050565b6108e481610b03565b82525050565b60006108f582610aac565b6108ff8185610ad5565b935061090f818560208601610b46565b80840191505092915050565b6000610928601c83610ae0565b915061093382610b79565b602082019050919050565b600061094b601683610ae0565b915061095682610ba2565b602082019050919050565b61096a81610b2f565b82525050565b61097981610b39565b82525050565b600061098b82846108ea565b915081905092915050565b60006020820190506109ab600083018461086e565b92915050565b600060208201905081810360008301526109cb818461087d565b905092915050565b600060208201905081810360008301526109ec8161091b565b9050919050565b60006020820190508181036000830152610a0c8161093e565b9050919050565b600061010082019050610a29600083018b610961565b610a36602083018a61086e565b610a436040830189610970565b610a506060830188610970565b610a5d60808301876108db565b610a6a60a083018661086e565b610a7760c083018561086e565b610a8460e083018461086e565b9998505050505050505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610afc82610b0f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610b64578082015181840152602081019050610b49565b83811115610b73576000848401525b50505050565b7f4e6f742061626c6520746f20736574206d696e74657220726f6c652100000000600082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b610bd481610af1565b8114610bdf57600080fd5b50565b610beb81610b03565b8114610bf657600080fd5b50565b610c0281610b2f565b8114610c0d57600080fd5b50565b610c1981610b39565b8114610c2457600080fd5b5056fea2646970667358221220661f0a399e6706f676de9700da80a6ea0e9bd6db1888f8554835e03d8736f1cb64736f6c63430008040033";

export class KittyPartyFactory__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _tomCatContract: string,
    _accountantContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<KittyPartyFactory> {
    return super.deploy(
      _tomCatContract,
      _accountantContract,
      overrides || {}
    ) as Promise<KittyPartyFactory>;
  }
  getDeployTransaction(
    _tomCatContract: string,
    _accountantContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _tomCatContract,
      _accountantContract,
      overrides || {}
    );
  }
  attach(address: string): KittyPartyFactory {
    return super.attach(address) as KittyPartyFactory;
  }
  connect(signer: Signer): KittyPartyFactory__factory {
    return super.connect(signer) as KittyPartyFactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KittyPartyFactoryInterface {
    return new utils.Interface(_abi) as KittyPartyFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): KittyPartyFactory {
    return new Contract(address, _abi, signerOrProvider) as KittyPartyFactory;
  }
}
