/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface KittyPartyYieldGeneratorZapperInterface
  extends ethers.utils.Interface {
  functions: {
    "MASK()": FunctionFragment;
    "ZapContract()": FunctionFragment;
    "__KittyPartyYieldGeneratorZapper_init(address)": FunctionFragment;
    "createLockedValue(bytes)": FunctionFragment;
    "kittyPartyYieldInfo(address)": FunctionFragment;
    "lockedAmount(address)": FunctionFragment;
    "lockedPool(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPartyInfo(address,address)": FunctionFragment;
    "setStatusOfKittyPartyLockedValue(bool,uint256)": FunctionFragment;
    "setZapContractAddress(address)": FunctionFragment;
    "statusOfKittyPartyLockedValue(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAddress()": FunctionFragment;
    "unwindLockedValue(address,bytes)": FunctionFragment;
    "yieldGenerated(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MASK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ZapContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__KittyPartyYieldGeneratorZapper_init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createLockedValue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "kittyPartyYieldInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lockedPool", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPartyInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatusOfKittyPartyLockedValue",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setZapContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "statusOfKittyPartyLockedValue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unwindLockedValue",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldGenerated",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "MASK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ZapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__KittyPartyYieldGeneratorZapper_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kittyPartyYieldInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockedPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStatusOfKittyPartyLockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setZapContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "statusOfKittyPartyLockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unwindLockedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldGenerated",
    data: BytesLike
  ): Result;

  events: {
    "KittyPartyReadyToYield(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KittyPartyReadyToYield"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class KittyPartyYieldGeneratorZapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KittyPartyYieldGeneratorZapperInterface;

  functions: {
    MASK(overrides?: CallOverrides): Promise<[BigNumber]>;

    ZapContract(overrides?: CallOverrides): Promise<[string]>;

    __KittyPartyYieldGeneratorZapper_init(
      treasuryContractParam: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLockedValue(
      zapCallData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kittyPartyYieldInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, boolean] & {
        lockedAmount: BigNumber;
        yieldGeneratedInLastRound: BigNumber;
        sellTokenAddress: string;
        poolAddress: string;
        lpTokenAddress: string;
        pendingToYield: boolean;
      }
    >;

    lockedAmount(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalLockedValue: BigNumber }>;

    lockedPool(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPartyInfo(
      _sellTokenAddress: string,
      _lpTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStatusOfKittyPartyLockedValue(
      _pendingToYield: boolean,
      amountPerRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setZapContractAddress(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    statusOfKittyPartyLockedValue(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { treasuryContractAddress: string }>;

    unwindLockedValue(
      kittyParty: string,
      zapCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yieldGenerated(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { yieldGeneratedInLastRound: BigNumber }>;
  };

  MASK(overrides?: CallOverrides): Promise<BigNumber>;

  ZapContract(overrides?: CallOverrides): Promise<string>;

  __KittyPartyYieldGeneratorZapper_init(
    treasuryContractParam: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLockedValue(
    zapCallData: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kittyPartyYieldInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string, boolean] & {
      lockedAmount: BigNumber;
      yieldGeneratedInLastRound: BigNumber;
      sellTokenAddress: string;
      poolAddress: string;
      lpTokenAddress: string;
      pendingToYield: boolean;
    }
  >;

  lockedAmount(
    kittyParty: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedPool(kittyParty: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPartyInfo(
    _sellTokenAddress: string,
    _lpTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStatusOfKittyPartyLockedValue(
    _pendingToYield: boolean,
    amountPerRound: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setZapContractAddress(
    _zapContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  statusOfKittyPartyLockedValue(
    kittyParty: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryAddress(overrides?: CallOverrides): Promise<string>;

  unwindLockedValue(
    kittyParty: string,
    zapCallData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yieldGenerated(
    kittyParty: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    MASK(overrides?: CallOverrides): Promise<BigNumber>;

    ZapContract(overrides?: CallOverrides): Promise<string>;

    __KittyPartyYieldGeneratorZapper_init(
      treasuryContractParam: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createLockedValue(
      zapCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kittyPartyYieldInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, boolean] & {
        lockedAmount: BigNumber;
        yieldGeneratedInLastRound: BigNumber;
        sellTokenAddress: string;
        poolAddress: string;
        lpTokenAddress: string;
        pendingToYield: boolean;
      }
    >;

    lockedAmount(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedPool(kittyParty: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPartyInfo(
      _sellTokenAddress: string,
      _lpTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStatusOfKittyPartyLockedValue(
      _pendingToYield: boolean,
      amountPerRound: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setZapContractAddress(
      _zapContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    statusOfKittyPartyLockedValue(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAddress(overrides?: CallOverrides): Promise<string>;

    unwindLockedValue(
      kittyParty: string,
      zapCallData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldGenerated(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    KittyPartyReadyToYield(
      kittyparty?: null,
      amountPerRound?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { kittyparty: string; amountPerRound: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    MASK(overrides?: CallOverrides): Promise<BigNumber>;

    ZapContract(overrides?: CallOverrides): Promise<BigNumber>;

    __KittyPartyYieldGeneratorZapper_init(
      treasuryContractParam: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLockedValue(
      zapCallData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kittyPartyYieldInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedAmount(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedPool(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPartyInfo(
      _sellTokenAddress: string,
      _lpTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStatusOfKittyPartyLockedValue(
      _pendingToYield: boolean,
      amountPerRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setZapContractAddress(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    statusOfKittyPartyLockedValue(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    unwindLockedValue(
      kittyParty: string,
      zapCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yieldGenerated(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MASK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZapContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __KittyPartyYieldGeneratorZapper_init(
      treasuryContractParam: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLockedValue(
      zapCallData: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kittyPartyYieldInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedAmount(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedPool(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPartyInfo(
      _sellTokenAddress: string,
      _lpTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStatusOfKittyPartyLockedValue(
      _pendingToYield: boolean,
      amountPerRound: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setZapContractAddress(
      _zapContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    statusOfKittyPartyLockedValue(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unwindLockedValue(
      kittyParty: string,
      zapCallData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yieldGenerated(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
