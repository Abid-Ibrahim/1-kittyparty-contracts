/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface KittyPartyControllerInterface extends ethers.utils.Interface {
  functions: {
    "MIN_KITTENS()": FunctionFragment;
    "addRoundDeposits()": FunctionFragment;
    "amountInDAIPerRound()": FunctionFragment;
    "applyInitialVerification()": FunctionFragment;
    "applyWinnerStrategy()": FunctionFragment;
    "applyYieldStrategy()": FunctionFragment;
    "changeState()": FunctionFragment;
    "creationTime()": FunctionFragment;
    "currentRound()": FunctionFragment;
    "dai()": FunctionFragment;
    "daoFeesInBasisPoints()": FunctionFragment;
    "depositAndAddKittenToParty(bytes32)": FunctionFragment;
    "durationInDays()": FunctionFragment;
    "getKittenStore()": FunctionFragment;
    "getWinners()": FunctionFragment;
    "initialize(uint256,address,uint8,uint8,bool,address,address,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "kittens()": FunctionFragment;
    "kreatorFeesInBasisPoints()": FunctionFragment;
    "numberOfRounds()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDAOFees(uint8)": FunctionFragment;
    "setInviteHash(bytes32)": FunctionFragment;
    "setKreatorFees(uint8)": FunctionFragment;
    "stage()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MIN_KITTENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRoundDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountInDAIPerRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyInitialVerification",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyWinnerStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyYieldStrategy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoFeesInBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndAddKittenToParty",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "durationInDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getKittenStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kittens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "kreatorFeesInBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfRounds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDAOFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInviteHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setKreatorFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_KITTENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRoundDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountInDAIPerRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyInitialVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyWinnerStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyYieldStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daoFeesInBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndAddKittenToParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "durationInDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKittenStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWinners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kittens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kreatorFeesInBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDAOFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInviteHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKreatorFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Completed()": EventFragment;
    "KittenAdded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StageTransition(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Completed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KittenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StageTransition"): EventFragment;
}

export class KittyPartyController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KittyPartyControllerInterface;

  functions: {
    MIN_KITTENS(overrides?: CallOverrides): Promise<[number]>;

    addRoundDeposits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    amountInDAIPerRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    applyInitialVerification(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyWinnerStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyYieldStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    creationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    daoFeesInBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositAndAddKittenToParty(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    durationInDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    getKittenStore(overrides?: CallOverrides): Promise<[string]>;

    getWinners(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      _amountInDAIPerRound: BigNumberish,
      _dai_address: string,
      _durationInDays: BigNumberish,
      _kittyType: BigNumberish,
      _vrfEnabled: boolean,
      _accountantContract: string,
      _yieldGeneratorAddress: string,
      _kittyPartyDAOTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    kittens(overrides?: CallOverrides): Promise<[string]>;

    kreatorFeesInBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfRounds(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDAOFees(
      _daoFeesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInviteHash(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKreatorFees(
      _kreatorFeesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stage(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_KITTENS(overrides?: CallOverrides): Promise<number>;

  addRoundDeposits(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  amountInDAIPerRound(overrides?: CallOverrides): Promise<BigNumber>;

  applyInitialVerification(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyWinnerStrategy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyYieldStrategy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  creationTime(overrides?: CallOverrides): Promise<BigNumber>;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  dai(overrides?: CallOverrides): Promise<string>;

  daoFeesInBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  depositAndAddKittenToParty(
    _inviteHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  durationInDays(overrides?: CallOverrides): Promise<BigNumber>;

  getKittenStore(overrides?: CallOverrides): Promise<string>;

  getWinners(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    _amountInDAIPerRound: BigNumberish,
    _dai_address: string,
    _durationInDays: BigNumberish,
    _kittyType: BigNumberish,
    _vrfEnabled: boolean,
    _accountantContract: string,
    _yieldGeneratorAddress: string,
    _kittyPartyDAOTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  kittens(overrides?: CallOverrides): Promise<string>;

  kreatorFeesInBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfRounds(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDAOFees(
    _daoFeesInBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInviteHash(
    _inviteHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKreatorFees(
    _kreatorFeesInBasisPoints: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stage(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_KITTENS(overrides?: CallOverrides): Promise<number>;

    addRoundDeposits(overrides?: CallOverrides): Promise<boolean>;

    amountInDAIPerRound(overrides?: CallOverrides): Promise<BigNumber>;

    applyInitialVerification(overrides?: CallOverrides): Promise<void>;

    applyWinnerStrategy(overrides?: CallOverrides): Promise<void>;

    applyYieldStrategy(overrides?: CallOverrides): Promise<BigNumber>;

    changeState(overrides?: CallOverrides): Promise<boolean>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<string>;

    daoFeesInBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndAddKittenToParty(
      _inviteHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    durationInDays(overrides?: CallOverrides): Promise<BigNumber>;

    getKittenStore(overrides?: CallOverrides): Promise<string>;

    getWinners(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      _amountInDAIPerRound: BigNumberish,
      _dai_address: string,
      _durationInDays: BigNumberish,
      _kittyType: BigNumberish,
      _vrfEnabled: boolean,
      _accountantContract: string,
      _yieldGeneratorAddress: string,
      _kittyPartyDAOTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    kittens(overrides?: CallOverrides): Promise<string>;

    kreatorFeesInBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfRounds(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDAOFees(
      _daoFeesInBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInviteHash(
      _inviteHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setKreatorFees(
      _kreatorFeesInBasisPoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stage(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Completed(): TypedEventFilter<[], {}>;

    KittenAdded(kitten?: null): TypedEventFilter<[string], { kitten: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    StageTransition(
      prevStage?: null,
      nextStage?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { prevStage: BigNumber; nextStage: BigNumber }
    >;
  };

  estimateGas: {
    MIN_KITTENS(overrides?: CallOverrides): Promise<BigNumber>;

    addRoundDeposits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    amountInDAIPerRound(overrides?: CallOverrides): Promise<BigNumber>;

    applyInitialVerification(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyWinnerStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyYieldStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    daoFeesInBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    depositAndAddKittenToParty(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    durationInDays(overrides?: CallOverrides): Promise<BigNumber>;

    getKittenStore(overrides?: CallOverrides): Promise<BigNumber>;

    getWinners(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _amountInDAIPerRound: BigNumberish,
      _dai_address: string,
      _durationInDays: BigNumberish,
      _kittyType: BigNumberish,
      _vrfEnabled: boolean,
      _accountantContract: string,
      _yieldGeneratorAddress: string,
      _kittyPartyDAOTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    kittens(overrides?: CallOverrides): Promise<BigNumber>;

    kreatorFeesInBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfRounds(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDAOFees(
      _daoFeesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInviteHash(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKreatorFees(
      _kreatorFeesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stage(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_KITTENS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRoundDeposits(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    amountInDAIPerRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    applyInitialVerification(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyWinnerStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyYieldStrategy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    creationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoFeesInBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositAndAddKittenToParty(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    durationInDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getKittenStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWinners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _amountInDAIPerRound: BigNumberish,
      _dai_address: string,
      _durationInDays: BigNumberish,
      _kittyType: BigNumberish,
      _vrfEnabled: boolean,
      _accountantContract: string,
      _yieldGeneratorAddress: string,
      _kittyPartyDAOTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kittens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kreatorFeesInBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfRounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDAOFees(
      _daoFeesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInviteHash(
      _inviteHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKreatorFees(
      _kreatorFeesInBasisPoints: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
