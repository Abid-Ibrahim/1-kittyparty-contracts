/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface KittyPartyFactoryInterface extends ethers.utils.Interface {
  functions: {
    "accountantContract()": FunctionFragment;
    "createKitty(uint256,address,uint8,uint8,bool,address,address)": FunctionFragment;
    "getMyKitties(address)": FunctionFragment;
    "myKitties(address,uint256)": FunctionFragment;
    "tomCatContract()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountantContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createKitty",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyKitties",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "myKitties",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tomCatContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accountantContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createKitty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyKitties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "myKitties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tomCatContract",
    data: BytesLike
  ): Result;

  events: {
    "KittyLive(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KittyLive"): EventFragment;
}

export class KittyPartyFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KittyPartyFactoryInterface;

  functions: {
    accountantContract(overrides?: CallOverrides): Promise<[string]>;

    createKitty(
      _amountInDAIPerRound: BigNumberish,
      _dai_address: string,
      _durationInDays: BigNumberish,
      _kittyType: BigNumberish,
      _vrfEnabled: boolean,
      yieldContract: string,
      daoTreasuryContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMyKitties(
      candidateAddress: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    myKitties(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tomCatContract(overrides?: CallOverrides): Promise<[string]>;
  };

  accountantContract(overrides?: CallOverrides): Promise<string>;

  createKitty(
    _amountInDAIPerRound: BigNumberish,
    _dai_address: string,
    _durationInDays: BigNumberish,
    _kittyType: BigNumberish,
    _vrfEnabled: boolean,
    yieldContract: string,
    daoTreasuryContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMyKitties(
    candidateAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  myKitties(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tomCatContract(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accountantContract(overrides?: CallOverrides): Promise<string>;

    createKitty(
      _amountInDAIPerRound: BigNumberish,
      _dai_address: string,
      _durationInDays: BigNumberish,
      _kittyType: BigNumberish,
      _vrfEnabled: boolean,
      yieldContract: string,
      daoTreasuryContract: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getMyKitties(
      candidateAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    myKitties(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tomCatContract(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    KittyLive(
      kreator?: string | null,
      kitty?: null
    ): TypedEventFilter<[string, string], { kreator: string; kitty: string }>;
  };

  estimateGas: {
    accountantContract(overrides?: CallOverrides): Promise<BigNumber>;

    createKitty(
      _amountInDAIPerRound: BigNumberish,
      _dai_address: string,
      _durationInDays: BigNumberish,
      _kittyType: BigNumberish,
      _vrfEnabled: boolean,
      yieldContract: string,
      daoTreasuryContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMyKitties(
      candidateAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    myKitties(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tomCatContract(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accountantContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createKitty(
      _amountInDAIPerRound: BigNumberish,
      _dai_address: string,
      _durationInDays: BigNumberish,
      _kittyType: BigNumberish,
      _vrfEnabled: boolean,
      yieldContract: string,
      daoTreasuryContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMyKitties(
      candidateAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    myKitties(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tomCatContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
