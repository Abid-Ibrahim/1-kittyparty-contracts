/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface KittyPartyTreasuryInterface extends ethers.utils.Interface {
  functions: {
    "__KittyPartyTreasury_init(address,address,address,address)": FunctionFragment;
    "accountantContract()": FunctionFragment;
    "bonusKPTPerToken()": FunctionFragment;
    "dai()": FunctionFragment;
    "daoAddress()": FunctionFragment;
    "kpt()": FunctionFragment;
    "redeemTokens(uint256)": FunctionFragment;
    "setAccountant(address)": FunctionFragment;
    "setBonusKPT(uint256)": FunctionFragment;
    "setDAOAddress(address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "__KittyPartyTreasury_init",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "accountantContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusKPTPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kpt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccountant",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBonusKPT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDAOAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "__KittyPartyTreasury_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountantContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bonusKPTPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kpt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccountant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBonusKPT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDAOAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "RedemptionRequested(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RedemptionRequested"): EventFragment;
}

export class KittyPartyTreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KittyPartyTreasuryInterface;

  functions: {
    __KittyPartyTreasury_init(
      _dai_address: string,
      _kpt_address: string,
      _daoAddress: string,
      _accountantContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    accountantContract(overrides?: CallOverrides): Promise<[string]>;

    bonusKPTPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    daoAddress(overrides?: CallOverrides): Promise<[string]>;

    kpt(overrides?: CallOverrides): Promise<[string]>;

    redeemTokens(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAccountant(
      _accountantContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBonusKPT(
      _amountToReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDAOAddress(
      _daoAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  __KittyPartyTreasury_init(
    _dai_address: string,
    _kpt_address: string,
    _daoAddress: string,
    _accountantContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  accountantContract(overrides?: CallOverrides): Promise<string>;

  bonusKPTPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  dai(overrides?: CallOverrides): Promise<string>;

  daoAddress(overrides?: CallOverrides): Promise<string>;

  kpt(overrides?: CallOverrides): Promise<string>;

  redeemTokens(
    redeemAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAccountant(
    _accountantContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBonusKPT(
    _amountToReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDAOAddress(
    _daoAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __KittyPartyTreasury_init(
      _dai_address: string,
      _kpt_address: string,
      _daoAddress: string,
      _accountantContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    accountantContract(overrides?: CallOverrides): Promise<string>;

    bonusKPTPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<string>;

    daoAddress(overrides?: CallOverrides): Promise<string>;

    kpt(overrides?: CallOverrides): Promise<string>;

    redeemTokens(
      redeemAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAccountant(
      _accountantContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBonusKPT(
      _amountToReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDAOAddress(
      _daoAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    RedemptionRequested(
      redeemer?: null,
      amount?: null,
      bonus?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { redeemer: string; amount: BigNumber; bonus: BigNumber }
    >;
  };

  estimateGas: {
    __KittyPartyTreasury_init(
      _dai_address: string,
      _kpt_address: string,
      _daoAddress: string,
      _accountantContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    accountantContract(overrides?: CallOverrides): Promise<BigNumber>;

    bonusKPTPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    daoAddress(overrides?: CallOverrides): Promise<BigNumber>;

    kpt(overrides?: CallOverrides): Promise<BigNumber>;

    redeemTokens(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAccountant(
      _accountantContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBonusKPT(
      _amountToReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDAOAddress(
      _daoAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __KittyPartyTreasury_init(
      _dai_address: string,
      _kpt_address: string,
      _daoAddress: string,
      _accountantContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    accountantContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonusKPTPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kpt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemTokens(
      redeemAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAccountant(
      _accountantContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBonusKPT(
      _amountToReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDAOAddress(
      _daoAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
