/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface KittensInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "KITTYPARTY()": FunctionFragment;
    "addKitten(address)": FunctionFragment;
    "checkAllExists(address)": FunctionFragment;
    "checkExists(address,address)": FunctionFragment;
    "getAllLength()": FunctionFragment;
    "getAllList()": FunctionFragment;
    "getAllValueAt(uint256)": FunctionFragment;
    "getIndex(address)": FunctionFragment;
    "getLength(address)": FunctionFragment;
    "getList(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getValueAt(address,uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setupKittyParty(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KITTYPARTY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addKitten", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkAllExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkExists",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllValueAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getIndex", values: [string]): string;
  encodeFunctionData(functionFragment: "getLength", values: [string]): string;
  encodeFunctionData(functionFragment: "getList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setupKittyParty",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "KITTYPARTY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addKitten", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkAllExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAllList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllValueAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValueAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupKittyParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "KittenAddedToParty(address,address)": EventFragment;
    "KittenCreated(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KittenAddedToParty"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KittenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class Kittens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KittensInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    KITTYPARTY(overrides?: CallOverrides): Promise<[string]>;

    addKitten(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkAllExists(
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    checkExists(
      kittyParty: string,
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    getAllLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllList(
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { kitten: string; reputation: BigNumber })[]]
    >;

    getAllValueAt(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string, BigNumber] & { kitten: string; reputation: BigNumber }]
    >;

    "getIndex(address)"(
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getIndex(address,address)"(
      kittyParty: string,
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLength(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getList(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { kitten: string; reputation: BigNumber })[]]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getValueAt(
      kittyParty: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string, BigNumber] & { kitten: string; reputation: BigNumber }]
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupKittyParty(
      childContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  KITTYPARTY(overrides?: CallOverrides): Promise<string>;

  addKitten(
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkAllExists(_kitten: string, overrides?: CallOverrides): Promise<boolean>;

  checkExists(
    kittyParty: string,
    _kitten: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAllLength(overrides?: CallOverrides): Promise<BigNumber>;

  getAllList(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber] & { kitten: string; reputation: BigNumber })[]
  >;

  getAllValueAt(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { kitten: string; reputation: BigNumber }>;

  "getIndex(address)"(
    _kitten: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getIndex(address,address)"(
    kittyParty: string,
    _kitten: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLength(kittyParty: string, overrides?: CallOverrides): Promise<BigNumber>;

  getList(
    kittyParty: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber] & { kitten: string; reputation: BigNumber })[]
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getValueAt(
    kittyParty: string,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { kitten: string; reputation: BigNumber }>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupKittyParty(
    childContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    KITTYPARTY(overrides?: CallOverrides): Promise<string>;

    addKitten(value: string, overrides?: CallOverrides): Promise<void>;

    checkAllExists(
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkExists(
      kittyParty: string,
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAllLength(overrides?: CallOverrides): Promise<BigNumber>;

    getAllList(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { kitten: string; reputation: BigNumber })[]
    >;

    getAllValueAt(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { kitten: string; reputation: BigNumber }>;

    "getIndex(address)"(
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndex(address,address)"(
      kittyParty: string,
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLength(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getList(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber] & { kitten: string; reputation: BigNumber })[]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getValueAt(
      kittyParty: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { kitten: string; reputation: BigNumber }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setupKittyParty(
      childContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    KittenAddedToParty(
      Kitten?: null,
      KittyParty?: null
    ): TypedEventFilter<
      [string, string],
      { Kitten: string; KittyParty: string }
    >;

    KittenCreated(
      Kitten?: null
    ): TypedEventFilter<[string], { Kitten: string }>;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    KITTYPARTY(overrides?: CallOverrides): Promise<BigNumber>;

    addKitten(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkAllExists(
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkExists(
      kittyParty: string,
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllLength(overrides?: CallOverrides): Promise<BigNumber>;

    getAllList(overrides?: CallOverrides): Promise<BigNumber>;

    getAllValueAt(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndex(address)"(
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIndex(address,address)"(
      kittyParty: string,
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLength(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getList(kittyParty: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueAt(
      kittyParty: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupKittyParty(
      childContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KITTYPARTY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addKitten(
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkAllExists(
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkExists(
      kittyParty: string,
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllValueAt(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIndex(address)"(
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIndex(address,address)"(
      kittyParty: string,
      _kitten: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLength(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getList(
      kittyParty: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueAt(
      kittyParty: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupKittyParty(
      childContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
