/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface KittyPartyStateTransitionInterface extends ethers.utils.Interface {
  functions: {
    "currentRound()": FunctionFragment;
    "durationInDays()": FunctionFragment;
    "getStage()": FunctionFragment;
    "isTransitionRequired()": FunctionFragment;
    "lastStageTime()": FunctionFragment;
    "numberOfRounds()": FunctionFragment;
    "stage()": FunctionFragment;
    "timeSinceChange()": FunctionFragment;
    "timeToCollection()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "durationInDays",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getStage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isTransitionRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastStageTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfRounds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timeSinceChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeToCollection",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "durationInDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTransitionRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastStageTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeSinceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeToCollection",
    data: BytesLike
  ): Result;

  events: {
    "Completed()": EventFragment;
    "StageTransition(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Completed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StageTransition"): EventFragment;
}

export class KittyPartyStateTransition extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KittyPartyStateTransitionInterface;

  functions: {
    currentRound(overrides?: CallOverrides): Promise<[number]>;

    durationInDays(overrides?: CallOverrides): Promise<[number]>;

    getStage(overrides?: CallOverrides): Promise<[BigNumber]>;

    isTransitionRequired(overrides?: CallOverrides): Promise<[number]>;

    lastStageTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    numberOfRounds(overrides?: CallOverrides): Promise<[number]>;

    stage(overrides?: CallOverrides): Promise<[number]>;

    timeSinceChange(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeToCollection(overrides?: CallOverrides): Promise<[number]>;
  };

  currentRound(overrides?: CallOverrides): Promise<number>;

  durationInDays(overrides?: CallOverrides): Promise<number>;

  getStage(overrides?: CallOverrides): Promise<BigNumber>;

  isTransitionRequired(overrides?: CallOverrides): Promise<number>;

  lastStageTime(overrides?: CallOverrides): Promise<BigNumber>;

  numberOfRounds(overrides?: CallOverrides): Promise<number>;

  stage(overrides?: CallOverrides): Promise<number>;

  timeSinceChange(overrides?: CallOverrides): Promise<BigNumber>;

  timeToCollection(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    currentRound(overrides?: CallOverrides): Promise<number>;

    durationInDays(overrides?: CallOverrides): Promise<number>;

    getStage(overrides?: CallOverrides): Promise<BigNumber>;

    isTransitionRequired(overrides?: CallOverrides): Promise<number>;

    lastStageTime(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfRounds(overrides?: CallOverrides): Promise<number>;

    stage(overrides?: CallOverrides): Promise<number>;

    timeSinceChange(overrides?: CallOverrides): Promise<BigNumber>;

    timeToCollection(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    Completed(): TypedEventFilter<[], {}>;

    StageTransition(
      party?: null,
      prevStage?: null,
      nextStage?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { party: string; prevStage: BigNumber; nextStage: BigNumber }
    >;
  };

  estimateGas: {
    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    durationInDays(overrides?: CallOverrides): Promise<BigNumber>;

    getStage(overrides?: CallOverrides): Promise<BigNumber>;

    isTransitionRequired(overrides?: CallOverrides): Promise<BigNumber>;

    lastStageTime(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfRounds(overrides?: CallOverrides): Promise<BigNumber>;

    stage(overrides?: CallOverrides): Promise<BigNumber>;

    timeSinceChange(overrides?: CallOverrides): Promise<BigNumber>;

    timeToCollection(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    durationInDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransitionRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastStageTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfRounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeSinceChange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeToCollection(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
