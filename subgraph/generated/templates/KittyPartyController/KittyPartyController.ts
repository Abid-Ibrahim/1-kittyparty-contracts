// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Completed extends ethereum.Event {
  get params(): Completed__Params {
    return new Completed__Params(this);
  }
}

export class Completed__Params {
  _event: Completed;

  constructor(event: Completed) {
    this._event = event;
  }
}

export class PaidFees extends ethereum.Event {
  get params(): PaidFees__Params {
    return new PaidFees__Params(this);
  }
}

export class PaidFees__Params {
  _event: PaidFees;

  constructor(event: PaidFees) {
    this._event = event;
  }

  get party(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fees(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PartyCompleted extends ethereum.Event {
  get params(): PartyCompleted__Params {
    return new PartyCompleted__Params(this);
  }
}

export class PartyCompleted__Params {
  _event: PartyCompleted;

  constructor(event: PartyCompleted) {
    this._event = event;
  }

  get party(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get internalState(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RefundRequested extends ethereum.Event {
  get params(): RefundRequested__Params {
    return new RefundRequested__Params(this);
  }
}

export class RefundRequested__Params {
  _event: RefundRequested;

  constructor(event: RefundRequested) {
    this._event = event;
  }

  get refund(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class StageTransition extends ethereum.Event {
  get params(): StageTransition__Params {
    return new StageTransition__Params(this);
  }
}

export class StageTransition__Params {
  _event: StageTransition;

  constructor(event: StageTransition) {
    this._event = event;
  }

  get party(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prevStage(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nextStage(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StopStaking extends ethereum.Event {
  get params(): StopStaking__Params {
    return new StopStaking__Params(this);
  }
}

export class StopStaking__Params {
  _event: StopStaking;

  constructor(event: StopStaking) {
    this._event = event;
  }

  get party(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WinnersDecided extends ethereum.Event {
  get params(): WinnersDecided__Params {
    return new WinnersDecided__Params(this);
  }
}

export class WinnersDecided__Params {
  _event: WinnersDecided;

  constructor(event: WinnersDecided) {
    this._event = event;
  }

  get party(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get winners(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class KittyPartyController__kPFactoryResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    return map;
  }
}

export class KittyPartyController__kittyInitiatorResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: BigInt;
  value7: Bytes;
  value8: Address;
  value9: Address;
  value10: Address;

  constructor(
    value0: i32,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: BigInt,
    value7: Bytes,
    value8: Address,
    value9: Address,
    value10: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromFixedBytes(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    map.set("value9", ethereum.Value.fromAddress(this.value9));
    map.set("value10", ethereum.Value.fromAddress(this.value10));
    return map;
  }
}

export class KittyPartyController__kittyPartyControllerVarsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: i32;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }
}

export class KittyPartyController extends ethereum.SmartContract {
  static bind(address: Address): KittyPartyController {
    return new KittyPartyController("KittyPartyController", address);
  }

  addRoundDeposits(): boolean {
    let result = super.call(
      "addRoundDeposits",
      "addRoundDeposits():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_addRoundDeposits(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addRoundDeposits",
      "addRoundDeposits():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  callDataForUnwind(): Bytes {
    let result = super.call(
      "callDataForUnwind",
      "callDataForUnwind():(bytes)",
      []
    );

    return result[0].toBytes();
  }

  try_callDataForUnwind(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "callDataForUnwind",
      "callDataForUnwind():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  calldataForLock(): Bytes {
    let result = super.call("calldataForLock", "calldataForLock():(bytes)", []);

    return result[0].toBytes();
  }

  try_calldataForLock(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "calldataForLock",
      "calldataForLock():(bytes)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  changeState(): boolean {
    let result = super.call("changeState", "changeState():(bool)", []);

    return result[0].toBoolean();
  }

  try_changeState(): ethereum.CallResult<boolean> {
    let result = super.tryCall("changeState", "changeState():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currentRound(): i32 {
    let result = super.call("currentRound", "currentRound():(uint8)", []);

    return result[0].toI32();
  }

  try_currentRound(): ethereum.CallResult<i32> {
    let result = super.tryCall("currentRound", "currentRound():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  dai(): Address {
    let result = super.call("dai", "dai():(address)", []);

    return result[0].toAddress();
  }

  try_dai(): ethereum.CallResult<Address> {
    let result = super.tryCall("dai", "dai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositAndAddKittenToParty(_inviteHash: Bytes): boolean {
    let result = super.call(
      "depositAndAddKittenToParty",
      "depositAndAddKittenToParty(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_inviteHash)]
    );

    return result[0].toBoolean();
  }

  try_depositAndAddKittenToParty(
    _inviteHash: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "depositAndAddKittenToParty",
      "depositAndAddKittenToParty(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_inviteHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  durationInDays(): i32 {
    let result = super.call("durationInDays", "durationInDays():(uint16)", []);

    return result[0].toI32();
  }

  try_durationInDays(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "durationInDays",
      "durationInDays():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getStage(): BigInt {
    let result = super.call("getStage", "getStage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getStage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getStage", "getStage():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isTransitionRequired(): i32 {
    let result = super.call(
      "isTransitionRequired",
      "isTransitionRequired():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_isTransitionRequired(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "isTransitionRequired",
      "isTransitionRequired():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  kPFactory(): KittyPartyController__kPFactoryResult {
    let result = super.call(
      "kPFactory",
      "kPFactory():(address,address,address,address,address)",
      []
    );

    return new KittyPartyController__kPFactoryResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress()
    );
  }

  try_kPFactory(): ethereum.CallResult<KittyPartyController__kPFactoryResult> {
    let result = super.tryCall(
      "kPFactory",
      "kPFactory():(address,address,address,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KittyPartyController__kPFactoryResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress()
      )
    );
  }

  kittyInitiator(): KittyPartyController__kittyInitiatorResult {
    let result = super.call(
      "kittyInitiator",
      "kittyInitiator():(uint8,uint8,uint8,uint8,uint16,uint16,uint256,bytes32,address,address,address)",
      []
    );

    return new KittyPartyController__kittyInitiatorResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toBigInt(),
      result[7].toBytes(),
      result[8].toAddress(),
      result[9].toAddress(),
      result[10].toAddress()
    );
  }

  try_kittyInitiator(): ethereum.CallResult<
    KittyPartyController__kittyInitiatorResult
  > {
    let result = super.tryCall(
      "kittyInitiator",
      "kittyInitiator():(uint8,uint8,uint8,uint8,uint16,uint16,uint256,bytes32,address,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KittyPartyController__kittyInitiatorResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toBigInt(),
        value[7].toBytes(),
        value[8].toAddress(),
        value[9].toAddress(),
        value[10].toAddress()
      )
    );
  }

  kittyPartyControllerVars(): KittyPartyController__kittyPartyControllerVarsResult {
    let result = super.call(
      "kittyPartyControllerVars",
      "kittyPartyControllerVars():(address,uint256,uint256,uint256,uint8,uint8)",
      []
    );

    return new KittyPartyController__kittyPartyControllerVarsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toI32()
    );
  }

  try_kittyPartyControllerVars(): ethereum.CallResult<
    KittyPartyController__kittyPartyControllerVarsResult
  > {
    let result = super.tryCall(
      "kittyPartyControllerVars",
      "kittyPartyControllerVars():(address,uint256,uint256,uint256,uint8,uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KittyPartyController__kittyPartyControllerVarsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toI32()
      )
    );
  }

  lastStageTime(): BigInt {
    let result = super.call("lastStageTime", "lastStageTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastStageTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastStageTime",
      "lastStageTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfRounds(): i32 {
    let result = super.call("numberOfRounds", "numberOfRounds():(uint16)", []);

    return result[0].toI32();
  }

  try_numberOfRounds(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "numberOfRounds",
      "numberOfRounds():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  partyRoundKittens(param0: BigInt): BigInt {
    let result = super.call(
      "partyRoundKittens",
      "partyRoundKittens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_partyRoundKittens(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "partyRoundKittens",
      "partyRoundKittens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stage(): i32 {
    let result = super.call("stage", "stage():(uint8)", []);

    return result[0].toI32();
  }

  try_stage(): ethereum.CallResult<i32> {
    let result = super.tryCall("stage", "stage():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  timeSinceChange(): BigInt {
    let result = super.call(
      "timeSinceChange",
      "timeSinceChange():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timeSinceChange(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeSinceChange",
      "timeSinceChange():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeToCollection(): i32 {
    let result = super.call(
      "timeToCollection",
      "timeToCollection():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_timeToCollection(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "timeToCollection",
      "timeToCollection():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class AddRoundDepositsCall extends ethereum.Call {
  get inputs(): AddRoundDepositsCall__Inputs {
    return new AddRoundDepositsCall__Inputs(this);
  }

  get outputs(): AddRoundDepositsCall__Outputs {
    return new AddRoundDepositsCall__Outputs(this);
  }
}

export class AddRoundDepositsCall__Inputs {
  _call: AddRoundDepositsCall;

  constructor(call: AddRoundDepositsCall) {
    this._call = call;
  }
}

export class AddRoundDepositsCall__Outputs {
  _call: AddRoundDepositsCall;

  constructor(call: AddRoundDepositsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApplyCompletePartyCall extends ethereum.Call {
  get inputs(): ApplyCompletePartyCall__Inputs {
    return new ApplyCompletePartyCall__Inputs(this);
  }

  get outputs(): ApplyCompletePartyCall__Outputs {
    return new ApplyCompletePartyCall__Outputs(this);
  }
}

export class ApplyCompletePartyCall__Inputs {
  _call: ApplyCompletePartyCall;

  constructor(call: ApplyCompletePartyCall) {
    this._call = call;
  }
}

export class ApplyCompletePartyCall__Outputs {
  _call: ApplyCompletePartyCall;

  constructor(call: ApplyCompletePartyCall) {
    this._call = call;
  }
}

export class ApplyInitialVerificationCall extends ethereum.Call {
  get inputs(): ApplyInitialVerificationCall__Inputs {
    return new ApplyInitialVerificationCall__Inputs(this);
  }

  get outputs(): ApplyInitialVerificationCall__Outputs {
    return new ApplyInitialVerificationCall__Outputs(this);
  }
}

export class ApplyInitialVerificationCall__Inputs {
  _call: ApplyInitialVerificationCall;

  constructor(call: ApplyInitialVerificationCall) {
    this._call = call;
  }
}

export class ApplyInitialVerificationCall__Outputs {
  _call: ApplyInitialVerificationCall;

  constructor(call: ApplyInitialVerificationCall) {
    this._call = call;
  }
}

export class ApplyWinnerStrategyCall extends ethereum.Call {
  get inputs(): ApplyWinnerStrategyCall__Inputs {
    return new ApplyWinnerStrategyCall__Inputs(this);
  }

  get outputs(): ApplyWinnerStrategyCall__Outputs {
    return new ApplyWinnerStrategyCall__Outputs(this);
  }
}

export class ApplyWinnerStrategyCall__Inputs {
  _call: ApplyWinnerStrategyCall;

  constructor(call: ApplyWinnerStrategyCall) {
    this._call = call;
  }
}

export class ApplyWinnerStrategyCall__Outputs {
  _call: ApplyWinnerStrategyCall;

  constructor(call: ApplyWinnerStrategyCall) {
    this._call = call;
  }
}

export class ChangeStateCall extends ethereum.Call {
  get inputs(): ChangeStateCall__Inputs {
    return new ChangeStateCall__Inputs(this);
  }

  get outputs(): ChangeStateCall__Outputs {
    return new ChangeStateCall__Outputs(this);
  }
}

export class ChangeStateCall__Inputs {
  _call: ChangeStateCall;

  constructor(call: ChangeStateCall) {
    this._call = call;
  }
}

export class ChangeStateCall__Outputs {
  _call: ChangeStateCall;

  constructor(call: ChangeStateCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositAndAddKittenToPartyCall extends ethereum.Call {
  get inputs(): DepositAndAddKittenToPartyCall__Inputs {
    return new DepositAndAddKittenToPartyCall__Inputs(this);
  }

  get outputs(): DepositAndAddKittenToPartyCall__Outputs {
    return new DepositAndAddKittenToPartyCall__Outputs(this);
  }
}

export class DepositAndAddKittenToPartyCall__Inputs {
  _call: DepositAndAddKittenToPartyCall;

  constructor(call: DepositAndAddKittenToPartyCall) {
    this._call = call;
  }

  get _inviteHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DepositAndAddKittenToPartyCall__Outputs {
  _call: DepositAndAddKittenToPartyCall;

  constructor(call: DepositAndAddKittenToPartyCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _kittyInitiator(): InitializeCall_kittyInitiatorStruct {
    return changetype<InitializeCall_kittyInitiatorStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _kittyYieldArgs(): InitializeCall_kittyYieldArgsStruct {
    return changetype<InitializeCall_kittyYieldArgsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get _kPFactory(): InitializeCall_kPFactoryStruct {
    return changetype<InitializeCall_kPFactoryStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get _kreator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _kreatorStake(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_kittyInitiatorStruct extends ethereum.Tuple {
  get kreatorFeesInBasisPoints(): i32 {
    return this[0].toI32();
  }

  get daoFeesInBasisPoints(): i32 {
    return this[1].toI32();
  }

  get winningStrategy(): i32 {
    return this[2].toI32();
  }

  get timeToCollection(): i32 {
    return this[3].toI32();
  }

  get maxKittens(): i32 {
    return this[4].toI32();
  }

  get durationInDays(): i32 {
    return this[5].toI32();
  }

  get amountInDAIPerRound(): BigInt {
    return this[6].toBigInt();
  }

  get partyName(): Bytes {
    return this[7].toBytes();
  }

  get daiAddress(): Address {
    return this[8].toAddress();
  }

  get yieldContract(): Address {
    return this[9].toAddress();
  }

  get winnerStrategy(): Address {
    return this[10].toAddress();
  }
}

export class InitializeCall_kittyYieldArgsStruct extends ethereum.Tuple {
  get sellTokenAddress(): Address {
    return this[0].toAddress();
  }

  get lpTokenAddress(): Address {
    return this[1].toAddress();
  }
}

export class InitializeCall_kPFactoryStruct extends ethereum.Tuple {
  get tomCatContract(): Address {
    return this[0].toAddress();
  }

  get accountantContract(): Address {
    return this[1].toAddress();
  }

  get litterAddress(): Address {
    return this[2].toAddress();
  }

  get daoTreasuryContract(): Address {
    return this[3].toAddress();
  }

  get keeperContractAddress(): Address {
    return this[4].toAddress();
  }
}

export class IssueRefundCall extends ethereum.Call {
  get inputs(): IssueRefundCall__Inputs {
    return new IssueRefundCall__Inputs(this);
  }

  get outputs(): IssueRefundCall__Outputs {
    return new IssueRefundCall__Outputs(this);
  }
}

export class IssueRefundCall__Inputs {
  _call: IssueRefundCall;

  constructor(call: IssueRefundCall) {
    this._call = call;
  }
}

export class IssueRefundCall__Outputs {
  _call: IssueRefundCall;

  constructor(call: IssueRefundCall) {
    this._call = call;
  }
}

export class PayOrganizerFeesCall extends ethereum.Call {
  get inputs(): PayOrganizerFeesCall__Inputs {
    return new PayOrganizerFeesCall__Inputs(this);
  }

  get outputs(): PayOrganizerFeesCall__Outputs {
    return new PayOrganizerFeesCall__Outputs(this);
  }
}

export class PayOrganizerFeesCall__Inputs {
  _call: PayOrganizerFeesCall;

  constructor(call: PayOrganizerFeesCall) {
    this._call = call;
  }
}

export class PayOrganizerFeesCall__Outputs {
  _call: PayOrganizerFeesCall;

  constructor(call: PayOrganizerFeesCall) {
    this._call = call;
  }
}

export class SetActivityIntervalCall extends ethereum.Call {
  get inputs(): SetActivityIntervalCall__Inputs {
    return new SetActivityIntervalCall__Inputs(this);
  }

  get outputs(): SetActivityIntervalCall__Outputs {
    return new SetActivityIntervalCall__Outputs(this);
  }
}

export class SetActivityIntervalCall__Inputs {
  _call: SetActivityIntervalCall;

  constructor(call: SetActivityIntervalCall) {
    this._call = call;
  }

  get _timeToCollection(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetActivityIntervalCall__Outputs {
  _call: SetActivityIntervalCall;

  constructor(call: SetActivityIntervalCall) {
    this._call = call;
  }
}

export class SetCallDataForYieldCall extends ethereum.Call {
  get inputs(): SetCallDataForYieldCall__Inputs {
    return new SetCallDataForYieldCall__Inputs(this);
  }

  get outputs(): SetCallDataForYieldCall__Outputs {
    return new SetCallDataForYieldCall__Outputs(this);
  }
}

export class SetCallDataForYieldCall__Inputs {
  _call: SetCallDataForYieldCall;

  constructor(call: SetCallDataForYieldCall) {
    this._call = call;
  }

  get _calldataForLock(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _callDataForUnwind(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetCallDataForYieldCall__Outputs {
  _call: SetCallDataForYieldCall;

  constructor(call: SetCallDataForYieldCall) {
    this._call = call;
  }
}

export class SetInviteHashCall extends ethereum.Call {
  get inputs(): SetInviteHashCall__Inputs {
    return new SetInviteHashCall__Inputs(this);
  }

  get outputs(): SetInviteHashCall__Outputs {
    return new SetInviteHashCall__Outputs(this);
  }
}

export class SetInviteHashCall__Inputs {
  _call: SetInviteHashCall;

  constructor(call: SetInviteHashCall) {
    this._call = call;
  }

  get _inviteHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetInviteHashCall__Outputs {
  _call: SetInviteHashCall;

  constructor(call: SetInviteHashCall) {
    this._call = call;
  }
}

export class StartNextRoundCall extends ethereum.Call {
  get inputs(): StartNextRoundCall__Inputs {
    return new StartNextRoundCall__Inputs(this);
  }

  get outputs(): StartNextRoundCall__Outputs {
    return new StartNextRoundCall__Outputs(this);
  }
}

export class StartNextRoundCall__Inputs {
  _call: StartNextRoundCall;

  constructor(call: StartNextRoundCall) {
    this._call = call;
  }
}

export class StartNextRoundCall__Outputs {
  _call: StartNextRoundCall;

  constructor(call: StartNextRoundCall) {
    this._call = call;
  }
}

export class StartStakingMultiRoundCall extends ethereum.Call {
  get inputs(): StartStakingMultiRoundCall__Inputs {
    return new StartStakingMultiRoundCall__Inputs(this);
  }

  get outputs(): StartStakingMultiRoundCall__Outputs {
    return new StartStakingMultiRoundCall__Outputs(this);
  }
}

export class StartStakingMultiRoundCall__Inputs {
  _call: StartStakingMultiRoundCall;

  constructor(call: StartStakingMultiRoundCall) {
    this._call = call;
  }
}

export class StartStakingMultiRoundCall__Outputs {
  _call: StartStakingMultiRoundCall;

  constructor(call: StartStakingMultiRoundCall) {
    this._call = call;
  }
}

export class StopStakingCall extends ethereum.Call {
  get inputs(): StopStakingCall__Inputs {
    return new StopStakingCall__Inputs(this);
  }

  get outputs(): StopStakingCall__Outputs {
    return new StopStakingCall__Outputs(this);
  }
}

export class StopStakingCall__Inputs {
  _call: StopStakingCall;

  constructor(call: StopStakingCall) {
    this._call = call;
  }
}

export class StopStakingCall__Outputs {
  _call: StopStakingCall;

  constructor(call: StopStakingCall) {
    this._call = call;
  }
}
