// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class KittyLive extends ethereum.Event {
  get params(): KittyLive__Params {
    return new KittyLive__Params(this);
  }
}

export class KittyLive__Params {
  _event: KittyLive;

  constructor(event: KittyLive) {
    this._event = event;
  }

  get kreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get kitty(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get kittyPartyName(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class KittyPartyFactory__createKittyInput_kittyInitiatorStruct extends ethereum.Tuple {
  get daiAddress(): Address {
    return this[0].toAddress();
  }

  get winningStrategy(): i32 {
    return this[1].toI32();
  }

  get vrfEnabled(): boolean {
    return this[2].toBoolean();
  }

  get yieldContract(): Address {
    return this[3].toAddress();
  }

  get maxKittens(): i32 {
    return this[4].toI32();
  }

  get durationInDays(): i32 {
    return this[5].toI32();
  }

  get timeToCollection(): i32 {
    return this[6].toI32();
  }

  get amountInDAIPerRound(): BigInt {
    return this[7].toBigInt();
  }

  get partyName(): Bytes {
    return this[8].toBytes();
  }
}

export class KittyPartyFactory extends ethereum.SmartContract {
  static bind(address: Address): KittyPartyFactory {
    return new KittyPartyFactory("KittyPartyFactory", address);
  }

  accountantContract(): Address {
    let result = super.call(
      "accountantContract",
      "accountantContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_accountantContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accountantContract",
      "accountantContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createKitty(
    _kittyInitiator: KittyPartyFactory__createKittyInput_kittyInitiatorStruct
  ): Address {
    let result = super.call(
      "createKitty",
      "createKitty((address,uint8,bool,address,uint16,uint16,uint8,uint256,bytes32)):(address)",
      [ethereum.Value.fromTuple(_kittyInitiator)]
    );

    return result[0].toAddress();
  }

  try_createKitty(
    _kittyInitiator: KittyPartyFactory__createKittyInput_kittyInitiatorStruct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createKitty",
      "createKitty((address,uint8,bool,address,uint16,uint16,uint8,uint256,bytes32)):(address)",
      [ethereum.Value.fromTuple(_kittyInitiator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  daoTreasuryContract(): Address {
    let result = super.call(
      "daoTreasuryContract",
      "daoTreasuryContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_daoTreasuryContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "daoTreasuryContract",
      "daoTreasuryContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMyKitties(candidateAddress: Address): Array<Address> {
    let result = super.call(
      "getMyKitties",
      "getMyKitties(address):(address[])",
      [ethereum.Value.fromAddress(candidateAddress)]
    );

    return result[0].toAddressArray();
  }

  try_getMyKitties(
    candidateAddress: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getMyKitties",
      "getMyKitties(address):(address[])",
      [ethereum.Value.fromAddress(candidateAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  lastData(): Bytes {
    let result = super.call("lastData", "lastData():(bytes)", []);

    return result[0].toBytes();
  }

  try_lastData(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("lastData", "lastData():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  lastFrom(): Address {
    let result = super.call("lastFrom", "lastFrom():(address)", []);

    return result[0].toAddress();
  }

  try_lastFrom(): ethereum.CallResult<Address> {
    let result = super.tryCall("lastFrom", "lastFrom():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastId(): BigInt {
    let result = super.call("lastId", "lastId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastId", "lastId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastOperator(): Address {
    let result = super.call("lastOperator", "lastOperator():(address)", []);

    return result[0].toAddress();
  }

  try_lastOperator(): ethereum.CallResult<Address> {
    let result = super.tryCall("lastOperator", "lastOperator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastValue(): BigInt {
    let result = super.call("lastValue", "lastValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastValue", "lastValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  litterAddress(): Address {
    let result = super.call("litterAddress", "litterAddress():(address)", []);

    return result[0].toAddress();
  }

  try_litterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "litterAddress",
      "litterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  myKitties(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "myKitties",
      "myKitties(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_myKitties(param0: Address, param1: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "myKitties",
      "myKitties(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC1155BatchReceived(
    _operator: Address,
    _from: Address,
    _ids: Array<BigInt>,
    _values: Array<BigInt>,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    _operator: Address,
    _from: Address,
    _ids: Array<BigInt>,
    _values: Array<BigInt>,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    _operator: Address,
    _from: Address,
    _id: BigInt,
    _value: BigInt,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    _operator: Address,
    _from: Address,
    _id: BigInt,
    _value: BigInt,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_value),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  oracleAddress(): Address {
    let result = super.call("oracleAddress", "oracleAddress():(address)", []);

    return result[0].toAddress();
  }

  try_oracleAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oracleAddress",
      "oracleAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shouldReject(): boolean {
    let result = super.call("shouldReject", "shouldReject():(bool)", []);

    return result[0].toBoolean();
  }

  try_shouldReject(): ethereum.CallResult<boolean> {
    let result = super.tryCall("shouldReject", "shouldReject():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceID: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tomCatContract(): Address {
    let result = super.call("tomCatContract", "tomCatContract():(address)", []);

    return result[0].toAddress();
  }

  try_tomCatContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tomCatContract",
      "tomCatContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tomCatContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _accountantContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _litterAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _daoTreasuryContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _oracleAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateKittyCall extends ethereum.Call {
  get inputs(): CreateKittyCall__Inputs {
    return new CreateKittyCall__Inputs(this);
  }

  get outputs(): CreateKittyCall__Outputs {
    return new CreateKittyCall__Outputs(this);
  }
}

export class CreateKittyCall__Inputs {
  _call: CreateKittyCall;

  constructor(call: CreateKittyCall) {
    this._call = call;
  }

  get _kittyInitiator(): CreateKittyCall_kittyInitiatorStruct {
    return changetype<CreateKittyCall_kittyInitiatorStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateKittyCall__Outputs {
  _call: CreateKittyCall;

  constructor(call: CreateKittyCall) {
    this._call = call;
  }

  get kittyAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateKittyCall_kittyInitiatorStruct extends ethereum.Tuple {
  get daiAddress(): Address {
    return this[0].toAddress();
  }

  get winningStrategy(): i32 {
    return this[1].toI32();
  }

  get vrfEnabled(): boolean {
    return this[2].toBoolean();
  }

  get yieldContract(): Address {
    return this[3].toAddress();
  }

  get maxKittens(): i32 {
    return this[4].toI32();
  }

  get durationInDays(): i32 {
    return this[5].toI32();
  }

  get timeToCollection(): i32 {
    return this[6].toI32();
  }

  get amountInDAIPerRound(): BigInt {
    return this[7].toBigInt();
  }

  get partyName(): Bytes {
    return this[8].toBytes();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetShouldRejectCall extends ethereum.Call {
  get inputs(): SetShouldRejectCall__Inputs {
    return new SetShouldRejectCall__Inputs(this);
  }

  get outputs(): SetShouldRejectCall__Outputs {
    return new SetShouldRejectCall__Outputs(this);
  }
}

export class SetShouldRejectCall__Inputs {
  _call: SetShouldRejectCall;

  constructor(call: SetShouldRejectCall) {
    this._call = call;
  }

  get _value(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetShouldRejectCall__Outputs {
  _call: SetShouldRejectCall;

  constructor(call: SetShouldRejectCall) {
    this._call = call;
  }
}
